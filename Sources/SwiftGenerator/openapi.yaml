# OpenAPI Specification for Swift Code Generation
# This file defines the API structure that can be used to generate Swift models and client code
# Version: 3.0.0 - Latest OpenAPI specification format

openapi: 3.0.0

# API Information
# Basic metadata about the API that will be used in generated code
info:
  title: Example API
  version: 1.0.0
  description: |
    This is an example API specification that demonstrates how to define
    endpoints and data models for Swift code generation.
    
    The OpenAPI generator can use this specification to create:
    - Swift structs for request/response models
    - API client code for making HTTP requests
    - Type-safe networking layer

# API Endpoints
# Defines the available HTTP endpoints and their request/response schemas
paths:
  # Users endpoint - demonstrates basic CRUD operations
  /users:
    # GET /users - Retrieve a list of users
    get:
      summary: Fetch users
      description: Retrieves a paginated list of all users in the system
      tags:
        - Users
      responses:
        # Successful response with user data
        200:
          description: A list of users
          content:
            application/json:
              schema:
                # Array of user objects
                type: array
                items:
                  # Individual user object structure
                  type: object
                  properties:
                    # User ID - unique identifier
                    id:
                      type: integer
                      description: Unique user identifier
                      example: 1
                    # User's display name
                    name:
                      type: string
                      description: User's full name
                      example: "John Doe"
                    # User's email address (optional)
                    email:
                      type: string
                      format: email
                      description: User's email address
                      example: "john.doe@example.com"
                    # User's age (optional)
                    age:
                      type: integer
                      minimum: 0
                      description: User's age in years
                      example: 30
                  # Required fields for user object
                  required:
                    - id
                    - name
                  # Additional metadata for the user object
                  additionalProperties: false
        # Error responses
        400:
          description: Bad request - invalid parameters
        404:
          description: Users not found
        500:
          description: Internal server error

# Components Section (for reusable schemas)
# This section can be added to define shared data models
components:
  schemas:
    # User model that can be referenced by multiple endpoints
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique user identifier
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        age:
          type: integer
          minimum: 0
          description: User's age in years
      required:
        - id
        - name
      example:
        id: 1
        name: "John Doe"
        email: "john.doe@example.com"
        age: 30

# Security Definitions (for authentication)
# Can be added to define API authentication requirements
# security:
#   - bearerAuth: []

# Tags for organizing endpoints
tags:
  - name: Users
    description: User management operations

